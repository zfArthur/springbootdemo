package com.example.demo.sf.array;

/**
 55. 跳跃游戏
 https://leetcode-cn.com/problems/jump-game/
 给定一个非负整数数组，你最初位于数组的第一个位置。

 数组中的每个元素代表你在该位置可以跳跃的最大长度。

 判断你是否能够到达最后一个位置。

 示例 1:

 输入: [2,3,1,1,4]
 输出: true
 解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。
 示例 2:

 输入: [3,2,1,0,4]
 输出: false
 解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。


 解析1：倒着推
 以[2, 3, 1, 1, 4]为例，我们的目标是到达最后一个位置。
 1、因为倒数第二个位置为1，所以从倒数第二个位置可以到达最后一个位置。因此只要我们能到达倒数第二个位置就能到达最后一个位置。
 2、因为倒数第三个位置为1，所以从倒数第三个位置可以到达倒数第二个位置。因此只要我们能到达倒数第三个位置就能到达倒数第二个位置从而能到达最后一个位置。
 3、因为倒数第四个位置为3，所以从倒数第四个位置可以到达倒数第三个位置。因此只要我们能到达倒数第四个位置就能到达倒数第三个位置从而能到达最后一个位置。
 4、因为倒数第五个位置为2，所以从倒数第五个位置可以到达倒数第四个位置。因此只要我们能到达倒数第五个位置（也就是第一个位置)就能到达倒数第三个位置从而能到达最后一个位置。
 因此，可以到达最后一个位置。
 因此，我们用一个变量pos来表示需要到达的位置，并初始化为nums.length - 1表示需要到达的位置为最后一个位置。
 然后从nums.length - 2向前遍历，if(nums[i] + i >= pos)表示从当前位置出发能够到达pos，因此只要能到达当前位置i就可以到达pos，因此可以更新pos为i的值。
 遍历到最后如果pos==0，也就表示从开始能够跳到末尾。
 */
/*

贪心法 倒着推:
解析1：倒着推
以[2, 3, 1, 1, 4]为例，我们的目标是到达最后一个位置。
1、因为倒数第二个位置为1，所以从倒数第二个位置可以到达最后一个位置。因此只要我们能到达倒数第二个位置就能到达最后一个位置。
2、因为倒数第三个位置为1，所以从倒数第三个位置可以到达倒数第二个位置。因此只要我们能到达倒数第三个位置就能到达倒数第二个位置从而能到达最后一个位置。
3、因为倒数第四个位置为3，所以从倒数第四个位置可以到达倒数第三个位置。因此只要我们能到达倒数第四个位置就能到达倒数第三个位置从而能到达最后一个位置。
4、因为倒数第五个位置为2，所以从倒数第五个位置可以到达倒数第四个位置。因此只要我们能到达倒数第五个位置（也就是第一个位置)就能到达倒数第三个位置从而能到达最后一个位置。
因此，可以到达最后一个位置。
因此，我们用一个变量pos来表示需要到达的位置，并初始化为nums.length - 1表示需要到达的位置为最后一个位置。
然后从nums.length - 2向前遍历，if(nums[i] + i >= pos)表示从当前位置出发能够到达pos，因此只要能到达当前位置i就可以到达pos，因此可以更新pos为i的值。
遍历到最后如果pos==0，也就表示从开始能够跳到末尾。
* */
public class canJump {
    //倒退贪心法
    public boolean canJump(int[] nums) {
        //临界条件判断
        if (nums == null) {
            return false;
        }
        //最后到达的位置
        int lastPosition = nums.length - 1;
        for (int i = nums.length - 1; i >= 0; i--) {
            // 逐步向前递推
            if (nums[i] + i >= lastPosition) {
                //记录最后到达的位置
                lastPosition = i;
            }
        }
        //当最后到底0时说明正好能跳到
        return lastPosition == 0;
    }
}
